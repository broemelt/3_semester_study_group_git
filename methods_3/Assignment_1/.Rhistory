require(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#Samples <-
Fixations <- read_csv('Fixations.csv')
Saccades <- read_csv('Saccades.csv')
View(Fixations)
Fixations %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()
View(Saccades)
require(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
pacman::p_load(ggplot2)
Saccades <- Saccades %>%
mutate(time_stamp=EndTime-Duration)
Saccades <- Saccades %>%
mutate(time_stamp=EndTime-Duration)
## Check distribution of raw samples. Is everything alright?
Fixations %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()
Saccades %>%
ggplot(aes(x=StartX, y=StartY))+
geom_point()+
ggtitle('Starting points of saccades')
Saccades %>%
ggplot(aes(x=EndX, y=EndY))+
geom_point()+
ggtitle('Ending points of saccades')
Saccades %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
ggtitle('Saccades start(red) and end(green) point')
Saccades %>% group_by(Task) %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
ggtitle('Saccades start(red) and end(green) point')
Saccades %>% filter(Task=Searching) %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
ggtitle('Saccades start(red) and end(green) point')
Fixations %>%
group_by(Task) %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()
Fixations %>%
ggplot(aes(x=PositionX, y=PositionY), colour=Task)+
geom_point()
Fixations %>%
ggplot(aes(x=PositionX, y=PositionY), fill=Task)+
geom_point()
Fixations %>%
ggplot(aes(x=PositionX, y=PositionY), group=Task)+
geom_point()
Fixations %>%
ggplot(aes(x=PositionX, y=PositionY, fill=Task))+
geom_point()
Fixations %>%
ggplot(aes(x=PositionX, y=PositionY, colour=Task))+
geom_point()
Saccades %>%
ggplot(aes(x=StartX, y=StartY, colour=Task))+
geom_point()+
ggtitle('Starting points of saccades')
Saccades %>%
ggplot(aes(colour=Task))+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
ggtitle('Saccades start(red) and end(green) point')
Fixations %>%
filter(Task==Searching)
Fixations %>%
filter(Task=='Searching') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()
Fixations %>%
filter(Task=='Counting') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
ggtitle('Fixations, counting task')
pacman::p_load(ggplot2, gridExtra)
require(knitr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
pacman::p_load(ggplot2, gridExtra)
grid.arrange(plot1, plot2)
plot1 <- Fixations %>%
filter(Task=='Searching') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
ggtitle('Fixations, searching task')
plot2 <- Fixations %>%
filter(Task=='Counting') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
ggtitle('Fixations, counting task')
grid.arrange(plot1, plot2)
## Check distribution of raw samples. Is everything alright?
plot1 <- Fixations %>%
filter(Task=='Searching') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
ggtitle('Fixations, searching task')
plot2 <- Fixations %>%
filter(Task=='Counting') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
ggtitle('Fixations, counting task')
grid.arrange(plot1, plot2)
plot3 <- Saccades %>%
filter(Task=='Searching') %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
ggtitle('Saccades start(red) and end(green) point, searching task')
plot4 <- Saccades %>%
filter(Task=='Counting') %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
ggtitle('Saccades start(red) and end(green) point, Counting task')
grid.arrange(plot3, plot4)
plot1 <- Fixations %>%
filter(Task=='Searching') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
facet_wrap(ParticipantID)+
ggtitle('Fixations, searching task')
?facet_wrap
Fixations %>%
filter(Task=='Searching') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
facet_wrap(~ParticipantID)+
ggtitle('Fixations, searching task')
## Check distribution of raw samples. Is everything alright?
Fixations %>%
filter(Task=='Searching') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
facet_wrap(~ParticipantID)+
ggtitle('Fixations, searching task')
Fixations %>%
filter(Task=='Counting') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
facet_wrap(~ParticipantID)+
ggtitle('Fixations, counting task')
Saccades %>%
filter(Task=='Searching') %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
facet_wrap(~ParticipantID)+
ggtitle('Saccades start(red) and end(green) point, searching task')
Saccades %>%
filter(Task=='Counting') %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
facet_wrap(~ParticipantID)+
ggtitle('Saccades start(red) and end(green) point, Counting task')
Fixations <- Fixations %>%
filter(ParticipantID=='Freddy2') %>%
mutate(PositionY=PositionY*100) %>%
mutate(PositionX=PositionX*100)
Fixations <- Fixations %>%
ifelse(ParticipantID=='Freddy2',
mutate(PositionY=PositionY*100))
#Samples <-
Fixations <- read_csv('Fixations.csv')
Saccades <- read_csv('Saccades.csv')
## Check distribution of raw samples. Is everything alright?
Fixations %>%
filter(Task=='Searching') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
facet_wrap(~ParticipantID)+
ggtitle('Fixations, searching task')
Fixations %>%
filter(Task=='Counting') %>%
ggplot(aes(x=PositionX, y=PositionY))+
geom_point()+
facet_wrap(~ParticipantID)+
ggtitle('Fixations, counting task')
Saccades %>%
filter(Task=='Searching') %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
facet_wrap(~ParticipantID)+
ggtitle('Saccades start(red) and end(green) point, searching task')
Saccades %>%
filter(Task=='Counting') %>%
ggplot()+
geom_point(aes(x=StartX, y=StartY), colour='red')+
geom_point(aes(x=EndX, y=EndY), colour='green')+
facet_wrap(~ParticipantID)+
ggtitle('Saccades start(red) and end(green) point, Counting task')
for (i in Fixations){
if (ParticipantsID=='Freddy2'){
mutate(PositionY=PositionY*100)
mutate(PositionX=PositionX*100)
}
}
for (i in Fixations){
if (ParticipantID=='Freddy2'){
mutate(PositionY=PositionY*100)
mutate(PositionX=PositionX*100)
}
}
for (i in Fixations){
if (Fixations$ParticipantID=='Freddy2'){
mutate(PositionY=PositionY*100)
mutate(PositionX=PositionX*100)
}
}
for (i in Fixations){
if (Fixations$ParticipantID=='Freddy2'){
mutate(PositionY=PositionY*100),
for (i in Fixations){
if (Fixations$ParticipantID=='Freddy2'){
mutate(PositionY=PositionY*100)+
mutate(PositionX=PositionX*100)
}
}
for (i in Fixations){
if (Fixations$ParticipantID=='Freddy2'){
mutate(PositionY=PositionY*100)
}
}
pacman::p_load(BiocManager)
plot_s10 <- s10 %>%
ggplot(aes(x=seed, y=mean, ymin = `2.5%`, ymax= `97.5%` ))+
geom_pointrange(fatten = 1/2)+
geom_hline(yintercept = c(0, 0.5), colour= 'green')+
labs(x="seed (simulation index)", y= "slope difference")+
ggtitle("slope difference, 10 participants")
s10 <- tibble(seed=1:n_sim) %>%
mutate(b1=purrr::map(seed, fun_sim_data, n=10)) %>%
unnest(b1)
n_sim <- 10
s10 <- tibble(seed=1:n_sim) %>%
mutate(b1=purrr::map(seed, fun_sim_data, n=10)) %>%
unnest(b1)
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(glue,
tidyr,
data.table,
moments,
tidybayes,
tibble,
cowplot,
viridis,
brms,
rstan,
cmdstanr,
magrittr,
gridExtra,
grid,
lattice,
ggplot2,
ggridges,
ellipse,
Rmisc,
dplyr,
"rmarkdown",
knitr)
pacman::p_load(tidyverse)
pacman::p_load(purr)
pacman::p_load(BiocManager)
average_mlu <- log(1.5)
sd_mlu_asd <- log(1.5+0.5)-log(1.5)
sd_mlu_td <- log(1.5+0.3)-log(1.5)
change_mlu_asd <- 0.4/1.5
change_mlu_td <- 0.6/1.5
change_sd_mlu_asd <- 0.4*(0.4/1.5)
change_sd_mlu_td <- 0.2*(0.6/1.5)
e <- 0.2
n <- 100
int_asd <- rnorm(n, mean=average_mlu, sd=sd_mlu_asd)
int_td <- rnorm(n, mean=average_mlu, sd=sd_mlu_td)
slope_asd <- rnorm(n, mean=change_mlu_asd, sd=change_sd_mlu_asd)
slope_td <- rnorm(n, mean = change_mlu_td, sd=change_sd_mlu_td)
sim_data <-
tibble(diagnosis=rep(c('TD', 'ASD'), each=n)) %>%
mutate(intercept=ifelse(diagnosis=='TD', int_td, int_asd)) %>%
mutate(slope=ifelse(diagnosis=='TD', slope_td, slope_asd)) %>%
mutate(error=ifelse(diagnosis=='TD', e, e)) %>%
dplyr::mutate(ID=row_number()) %>%
slice(rep(1:n(), each=6)) %>%
add_column(visit=rep(c(1,2,3,4,5,6), times=n+n))
for(i in seq(nrow(sim_data))){
sim_data$MLU[i] <- exp(rnorm(1, sim_data$intercept[i]+(sim_data$slope[i]*(sim_data$visit[i]-1)), sim_data$error[i]))
}
ggplot(sim_data, aes(visit,MLU, color=diagnosis, group=ID))+
theme_bw()+
geom_point()+
geom_line(alpha=0.3)
MLU_f1 <- bf(MLU ~ 0 + diagnosis + diagnosis:visit + (1 + visit|ID))
lognorm_fam <- brmsfamily('lognormal', bhaz = list(Boundary.knots=c(-1,31)))
get_prior(data = sim_data, family = lognorm_fam, MLU_f1)
priors <- c(
prior(normal(1.5,0.5),class=b,coef="diagnosisASD"),
prior(normal(1.5,0.3),class=b,coef="diagnosisTD"),
prior(normal(0,0.5),class=b),
prior(normal(0,0.5),class=sd),
prior(lkj(2),class=cor))
MLU_prior_m1 <- brm(
MLU_f1,
data = sim_data,
prior = priors,
family = lognorm_fam,
refresh=0,
sample_prior = 'only',
iter=6000,
warmup = 2500,
backend = "cmdstanr",
threads = threading(2),
chains = 2,
cores = 2,
control = list(
adapt_delta = 0.99,
max_treedepth = 20
)
)
pp_check(MLU_prior_m1, ndraws=100)
MLU_prior_m1_fit <- brm(
MLU_f1,
data = sim_data,
prior = priors,
family = lognorm_fam,
refresh=0,
sample_prior = TRUE,
iter=6000,
warmup = 2500,
backend = "cmdstanr",
threads = threading(2),
chains = 2,
cores = 2,
control = list(
adapt_delta = 0.99,
max_treedepth = 20
)
)
pp_check(MLU_prior_m1_fit, ndraws = 100)
plot(MLU_prior_m1_fit)
print(MLU_prior_m1_fit)
posterior <- as_draws_df(MLU_prior_m1_fit)
plot1 <- ggplot(posterior)+
geom_histogram(aes(prior_b_diagnosisASD), fill='red', color='black', alpha=0.3, bins=50)+
geom_histogram(aes(b_diagnosisASD), fill='green', color='black', alpha=0.3, bins=50)+
theme_classic()+
ggtitle('prior-posterior update check on interceps for ASD')+
xlab('intercept for ASD')
plot2 <- ggplot(posterior)+
geom_histogram(aes(prior_b_diagnosisTD), fill='red', color='black', alpha=0.3, bins=50)+
geom_histogram(aes(b_diagnosisTD), fill='green', color='black', alpha=0.3, bins=50)+
theme_classic()+
ggtitle('prior-posterior update check on intercept for TD')+
xlab('intercept for TD')
plot3 <- ggplot(posterior)+
geom_histogram(aes(`prior_b_diagnosisASD:visit`), fill='red', color='black', alpha=0.3, bins=50)+
geom_histogram(aes(`b_diagnosisASD:visit`), fill='green', color='black', alpha=0.3, bins=50)+
theme_classic()+
ggtitle('prior-posterior update check on slope for ASD')+
xlab("Slope for ASD")
plot4 <- ggplot(posterior)+
geom_histogram(aes(`prior_b_diagnosisTD:visit`), fill='red', color='black', alpha=0.3, bins=50)+
geom_histogram(aes(`b_diagnosisTD:visit`), fill='green', color='black', alpha=0.3, bins=50)+
theme_classic()+
ggtitle('prior-posterior update check on slope for TD')+
xlab("slope for TD")
plot5 <- ggplot(posterior)+
geom_histogram(aes(prior_cor_ID), fill='red', color='black', alpha=0.3, bins=50)+
geom_histogram(aes(cor_ID__Intercept__visit), fill='green', color='black', alpha=0.3, bins=50)+
theme_classic()+
ggtitle('prior-posterior update check on correlation between varying intercepts and slopes')+
xlab("Correlation")
plot6 <- ggplot(posterior)+
geom_histogram(aes(prior_sd_ID), fill='red', color='black', alpha=0.3, bins=50)+
geom_histogram(aes(sd_ID__Intercept), fill='green', color='black', alpha=0.3, bins=50)+
theme_classic()+
ggtitle('Prior-posterior update check, the variability of the intercept')+
xlab("Intercept")
plot7 <- ggplot(posterior)+
geom_histogram(aes(prior_sd_ID), fill='red', color='black', alpha=0.3, bins=50)+
geom_histogram(aes(sd_ID__visit), fill='green', color='black', alpha=0.3, bins=50)+
theme_classic()+
ggtitle('Prior-posterior update check, the variability of the slopes')+
xlab("Intercept")
plot1
plot2
plot3
plot4
plot5
plot6
plot7
fun_sim_data <- function(seed,n){
set.seed(seed)
average_mlu <- log(1.5)
sd_mlu_asd <- log(1.5+0.5)-log(1.5)
sd_mlu_td <- log(1.5+0.3)-log(1.5)
change_mlu_asd <- 0.4/1.5
change_mlu_td <- 0.6/1.5
change_sd_mlu_asd <- 0.4*(0.4/1.5)
change_sd_mlu_td <- 0.2*(0.6/1.5)
e <- 0.2
int_asd <- rnorm(n, mean=average_mlu, sd=sd_mlu_asd)
int_td <- rnorm(n, mean=average_mlu, sd=sd_mlu_td)
slope_asd <- rnorm(n, mean=change_mlu_asd, sd=change_sd_mlu_asd)
slope_td <- rnorm(n, mean = change_mlu_td, sd=change_sd_mlu_td)
data <-
tibble(diagnosis=rep(c('TD', 'ASD'), each=n)) %>%
mutate(intercept=ifelse(diagnosis=='TD', int_td, int_asd)) %>%
mutate(slope=ifelse(diagnosis=='TD', slope_td, slope_asd)) %>%
mutate(error=ifelse(diagnosis=='TD', e, e)) %>%
dplyr::mutate(ID=row_number()) %>%
slice(rep(1:n(), each=6)) %>%
add_column(visit=rep(c(1,2,3,4,5,6), times=n+n))
for(i in seq(nrow(data))){
data$MLU[i] <- exp(rnorm(1,data$intercept[i]+(data$slope[i]*(data$visit[i]-1)), data$error[i]))
}
data <- data[,c(1,5,6,2,3,4,7)]
post <- update(MLU_prior_m1_fit,
newdata = data,
seed=seed) %>%
as_draws_df() %>%
mutate(slope_diff=(`b_diagnosisTD:visit`- `b_diagnosisASD:visit`))
CI <- as.data.frame(t(quantile(post$slope_diff, probs=c(0.025, 0.975)))) %>%
add_column(mean=mean(post$slope_diff))
return(CI)}
n_sim <- 10
s10 <- tibble(seed=1:n_sim) %>%
mutate(b1=purrr::map(seed, fun_sim_data, n=10)) %>%
unnest(b1)
plot_s10 <- s10 %>%
ggplot(aes(x=seed, y=mean, ymin = `2.5%`, ymax= `97.5%` ))+
geom_pointrange(fatten = 1/2)+
geom_hline(yintercept = c(0, 0.5), colour= 'green')+
labs(x="seed (simulation index)", y= "slope difference")+
ggtitle("slope difference, 10 participants")
plot_s10
